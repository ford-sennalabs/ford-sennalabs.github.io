{"version":3,"sources":["click.svg","SelectField.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SelectField","map","mapApi","searchBox","searchInput","useRef","useEffect","places","SearchBox","current","addListener","onPlacesChanged","bindTo","place","getPlaces","geometry","viewport","fitBounds","setCenter","location","setZoom","blur","className","ref","type","onFocus","value","placeholder","Marker","children","App","mapRef","useState","bounds","setBounds","mapApiLoaded","mapInstance","setMapInstance","zoom","lat","lng","currentPosition","points","communityData","dot","properties","cluster","positionId","id","city","name","address","phoneNumber","phone_number","coordinates","parseFloat","longitude","latitude","useSupercluster","options","radius","maxZoom","clusters","supercluster","bootstrapURLKeys","key","libraries","defaultZoom","center","yesIWantToUseGoogleMapApiInternals","onChange","nw","se","onGoogleApiLoaded","maps","apiHasLoaded","isCluster","pointCount","point_count","style","width","length","height","onClick","expansionZoom","Math","min","getClusterExpansionZoom","panTo","src","clickIcon","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7851325.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click.cd8693ef.svg\";","import React, { useEffect, useRef } from \"react\";\n\nfunction SelectField({ map, mapApi }) {\n  let searchBox = null;\n  const searchInput = useRef();\n  useEffect(() => {\n    searchBox = new mapApi.places.SearchBox(searchInput.current);\n    searchBox.addListener(\"places_changed\", onPlacesChanged);\n    searchBox.bindTo(\"bounds\", map);\n  }, []);\n  const onPlacesChanged = () => {\n    const selected = searchBox.getPlaces();\n    const { 0: place } = selected;\n    if (!place.geometry) return;\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);\n    }\n\n    searchInput.current.blur();\n  };\n  const clearSearchBox = () => {\n    searchInput.current.value = \"\";\n  };\n  return (\n    <div className=\"search-wraper\">\n      <input\n        ref={(ref) => {\n          searchInput.current = ref;\n        }}\n        type=\"text\"\n        onFocus={clearSearchBox}\n        placeholder=\"Enter a location\"\n      />\n    </div>\n  );\n}\n\nexport default SelectField;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport clickIcon from \"./click.svg\";\nimport SelectField from \"./SelectField\";\n\nimport communityData from \"./community\";\n\nimport \"./App.css\";\n\nconst Marker = ({ children }) => children;\n\nfunction App() {\n  const mapRef = useRef();\n  const [bounds, setBounds] = useState(null);\n  const [mapInstance, setMapInstance] = useState({\n    mapApiLoaded: null,\n    mapInstance: null,\n    mapApi: null,\n  });\n  const [zoom, setZoom] = useState(10);\n  const [currentPosition] = useState({\n    lat: 37.4198121,\n    lng: -122.0961097,\n  });\n\n  const points = communityData.map((dot) => ({\n    type: \"Feature\",\n    properties: {\n      cluster: false,\n      positionId: dot.id,\n      city: dot.city,\n      name: dot.name,\n      address: dot.address,\n      phoneNumber: dot.phone_number,\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [parseFloat(dot.longitude), parseFloat(dot.latitude)],\n    },\n  }));\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 },\n  });\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance({\n      mapApiLoaded: true,\n      mapInstance: map,\n      mapApi: maps,\n    });\n  };\n\n  useEffect(() => {\n    // if (navigator.geolocation) {\n    //   console.log(\"wdwdw\");\n    //   navigator.geolocation.getCurrentPosition(success, fail, {\n    //     timeout: 10000,\n    //   });\n    // }\n  }, []);\n  return (\n    <div>\n      <div className=\"card-cover\">\n        <div className=\"header-bar\">\n          <div>Vietnam Community Map.</div>\n          {mapInstance.mapInstance && (\n            <SelectField\n              map={mapInstance.mapInstance}\n              mapApi={mapInstance.mapApi}\n            />\n          )}\n        </div>\n        <div className=\"map-card\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyBS7oB5JMl_J1PrqC-09WAX1XNh2UPiysQ\",\n              libraries: [\"places\", \"geometry\"],\n            }}\n            defaultZoom={zoom}\n            center={currentPosition}\n            yesIWantToUseGoogleMapApiInternals\n            onChange={({ zoom, bounds }) => {\n              setZoom(zoom);\n              setBounds([\n                bounds.nw.lng,\n                bounds.se.lat,\n                bounds.se.lng,\n                bounds.nw.lat,\n              ]);\n            }}\n            onGoogleApiLoaded={({ map, maps }) => {\n              apiHasLoaded(map, maps);\n              mapRef.current = map;\n            }}\n          >\n            {clusters.map((cluster) => {\n              const [longitude, latitude] = cluster.geometry.coordinates;\n              const {\n                cluster: isCluster,\n                point_count: pointCount,\n              } = cluster.properties;\n\n              if (isCluster) {\n                return (\n                  <Marker\n                    key={`cluster-${cluster.id}`}\n                    lat={latitude}\n                    lng={longitude}\n                  >\n                    <div\n                      className=\"cluster-marker\"\n                      style={{\n                        width: `${10 + (pointCount / points.length) * 20}px`,\n                        height: `${10 + (pointCount / points.length) * 20}px`,\n                      }}\n                      onClick={() => {\n                        const expansionZoom = Math.min(\n                          supercluster.getClusterExpansionZoom(cluster.id),\n                          20\n                        );\n                        mapRef.current.setZoom(expansionZoom);\n                        mapRef.current.panTo({ lat: latitude, lng: longitude });\n                      }}\n                    >\n                      {pointCount}\n                    </div>\n                  </Marker>\n                );\n              }\n\n              return (\n                <Marker\n                  key={`crime-${cluster.properties.positionId}`}\n                  lat={latitude}\n                  lng={longitude}\n                >\n                  <div className=\"position-marker\">\n                    <img src={clickIcon} />\n                    <div className=\"detail-popup\">\n                      <div className=\"name\">{cluster.properties.name}</div>\n                      <div className=\"city\">{cluster.properties.city}</div>\n                      <div className=\"address\">\n                        {cluster.properties.address}\n                      </div>\n                      <div className=\"phone\">\n                        {cluster.properties.phoneNumber}\n                      </div>\n                    </div>\n                  </div>\n                </Marker>\n              );\n            })}\n          </GoogleMapReact>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}